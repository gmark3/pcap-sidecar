#!/usr/bin/env bash

export MDS_URL='http://metadata.google.internal/computeMetadata/v1'
export MDS_CURL="curl -s -H Metadata-Flavor:Google ${MDS_URL}"

export ENV_FILE='/pcap.env'

export INSTANCE_ID=$(${MDS_CURL}/instance/id)

export APP_SIDECAR=pcap
echo "APP_SIDECAR=${APP_SIDECAR}" >> ${ENV_FILE}

export PCAP_EXEC_ENV=${PCAP_EXEC_ENV:-run}

PCAP_ENV_INIT_SCRIPT="/scripts/init_${PCAP_EXEC_ENV}"
if [[ -s ${PCAP_ENV_INIT_SCRIPT}  ]]; then
  # see: http://cloud/logging/docs/reference/v2/rest/v2/LogEntry#LogSeverity
  echo "{\"severity\":\"NOTICE\",\"message\":\"PCAP_EXEC_ENV => ${PCAP_EXEC_ENV}\",\"sidecar\":\"${APP_SIDECAR}\",\"module\":\"init\"}"
  source ${PCAP_ENV_INIT_SCRIPT}
else 
  echo "{\"severity\":\"CRITICAL\",\"message\":\"invalid value for PCAP_EXEC_ENV => ${PCAP_EXEC_ENV}\",\"sidecar\":\"${APP_SIDECAR}\",\"module\":\"init\"}"
  exit
fi

PCAP_EXT="${PCAP_FILE_EXT:-pcap}"
PCAP_GZIP="${PCAP_COMPRESS:-true}" # compressing is strongly recommended
PCAP_DATE="$(date +'%Y/%m/%d/%H-%M' | tr -d '\n')"
PCAP_MNT="${GCS_MOUNT:-/pcap}"
PCAP_TMP="${GCS_MOUNT:-/pcap}-tmp"
PCAP_FILE="${PCAP_TMP}/part"
GCS_DIR="${GOOGLE_CLOUD_PROJECT}/${PCAP_EXEC_ENV}/${K_SERVICE}/${GCP_REGION}/${K_REVISION}/${PCAP_DATE}/${INSTANCE_ID}"
PCAP_DIR="${PCAP_MNT}/${GCS_DIR}"

if [[ -z "${PCAP_GCS_BUCKET}" ]]; then
  export PCAP_GCS_EXPORT=false
else
  export PCAP_GCS_EXPORT=${PCAP_GCS_EXPORT:-true}
fi

if [[ "${PCAP_GCS_EXPORT}" == false ]]; then
  # if `PCAP_GCS_EXPORT` is set to `false` then:
  # PCAP engines that generate files should be disabled.
  export PCAP_GCS_FUSE=false
  export PCAP_TCPDUMP=false
  export PCAP_JSONDUMP=false
  export PCAP_FSN_ENABLED=false
else
  # default behavior when GCS export is enabled
  export PCAP_GCS_FUSE=${PCAP_GCS_FUSE:-true}
  export PCAP_TCPDUMP=${PCAP_TCPDUMP:-true}
  export PCAP_JSONDUMP=${PCAP_JSON:-false}
  export PCAP_FSN_ENABLED=true
fi

export PCAP_JSONDUMP_LOG=${PCAP_JSON_LOG:-true}

echo "PCAP_DEBUG=${PCAP_DEBUG:-false}" >> ${ENV_FILE}
echo "PCAP_SUPERVISOR_PORT=${PCAP_SUPERVISOR_PORT:-23456}" >> ${ENV_FILE}
echo "PCAP_COMPAT=${PCAP_COMPAT:-false}" >> ${ENV_FILE}
echo "PCAP_EXEC_ENV=${PCAP_EXEC_ENV}" >> ${ENV_FILE}
echo "PROJECT_ID=${GOOGLE_CLOUD_PROJECT}" >> ${ENV_FILE}
echo "GCP_REGION=${GCP_REGION}" >> ${ENV_FILE}
echo "APP_SERVICE=${K_SERVICE}" >> ${ENV_FILE}
echo "APP_REVISION=${K_REVISION}" >> ${ENV_FILE}
echo "APP_VERSION=${K_REVISION}" >> ${ENV_FILE}
echo "INSTANCE_ID=${INSTANCE_ID}" >> ${ENV_FILE}
echo "PCAP_EXT=${PCAP_EXT}" >> ${ENV_FILE}
echo "PCAP_GZIP=${PCAP_GZIP}" >> ${ENV_FILE}
echo "PCAP_DATE=${PCAP_DATE}" >> ${ENV_FILE}
echo "PCAP_MNT=${PCAP_MNT}" >> ${ENV_FILE}
echo "PCAP_TMP=${PCAP_TMP}" >> ${ENV_FILE}
echo "PCAP_FILE=${PCAP_FILE}" >> ${ENV_FILE}
echo "PCAP_DIR=${PCAP_DIR}" >> ${ENV_FILE}
echo "PCAP_GCS_FUSE=${PCAP_GCS_FUSE}" >> ${ENV_FILE}
echo "PCAP_GCS_BUCKET=${PCAP_GCS_BUCKET:-DISABLED}" >> ${ENV_FILE}
echo "PCAP_GCS_DIR=${GCS_DIR}" >> ${ENV_FILE}
echo "GCS_DIR=${GCS_DIR}" >> ${ENV_FILE}
echo "GCS_BUCKET=${PCAP_GCS_BUCKET:-DISABLED}" >> ${ENV_FILE}
echo "PCAP_IFACE=${PCAP_IFACE:-any}" >> ${ENV_FILE}
echo "PCAP_SNAPLEN=${PCAP_SNAPSHOT_LENGTH:-65536}" >> ${ENV_FILE}
echo "PCAP_USE_CRON=${PCAP_USE_CRON:-false}" >> ${ENV_FILE}
echo "PCAP_CRON_EXP=${PCAP_CRON_EXP:--}" >> ${ENV_FILE}
echo "PCAP_TZ=${PCAP_TIMEZONE:-UTC}" >> ${ENV_FILE}
echo "PCAP_TO=${PCAP_TIMEOUT_SECS:-0}" >> ${ENV_FILE}
echo "PCAP_ORDERED=${PCAP_ORDERED:-false}" >> ${ENV_FILE}
echo "PCAP_CONNTRACK=${PCAP_CONNTRACK:-false}" >> ${ENV_FILE}
echo "PCAP_TCPDUMP=${PCAP_TCPDUMP}" >> ${ENV_FILE}
echo "PCAP_JSONDUMP=${PCAP_JSONDUMP}" >> ${ENV_FILE}
echo "PCAP_JSONDUMP_LOG=${PCAP_JSONDUMP_LOG}" >> ${ENV_FILE}

# most verbose PCAP translation by default
echo "PCAP_VERBOSITY=${PCAP_VERBOSITY:-DEBUG}" >> ${ENV_FILE}

# short-rotate-secs == small-pcap-files
# If APP is data intensive: keep this value small to avoid memory saturation
echo "PCAP_SECS=${PCAP_ROTATE_SECS:-60}" >> ${ENV_FILE}

# healtch check TCP port
echo "PCAP_HC_PORT=${PCAP_HC_PORT:-12345}" >> ${ENV_FILE}

# free style BPF filter aka complex filter, if defined: no simple filters will be applied
echo "PCAP_FILTER=${PCAP_FILTER:-DISABLED}" >> ${ENV_FILE}
# simple filter; comma separated list of NETWORK LAYER (L3) protocols to capture traffic to/from
echo "PCAP_L3_PROTOS=${PCAP_L3_PROTOS:-ipv4,ipv6}" >> ${ENV_FILE}
# simple filter; comma separated list of TRANSPORT LAYER (L4) protocols to capture traffic to/from
echo "PCAP_L4_PROTOS=${PCAP_L4_PROTOS:-tcp,udp}" >> ${ENV_FILE}
# simple filter; comma separated list of IPv4 (addresses and networks/CIDR) to capture traffic to/from
echo "PCAP_IPV4=${PCAP_IPV4:-DISABLED}" >> ${ENV_FILE}
# simple filter; comma separated list of IPv6 (addresses and networks/CIDR) to capture traffic to/from
echo "PCAP_IPV6=${PCAP_IPV6:-DISABLED}" >> ${ENV_FILE}
# simple filter; comma separated list of FQDNs (hosts) to capture traffic to/from
echo "PCAP_HOSTS=${PCAP_HOSTS:-ALL}" >> ${ENV_FILE}
# simple filter; comma separated list of transport layer addresses (ports) to capture traffic to/from
echo "PCAP_PORTS=${PCAP_PORTS:-ALL}" >> ${ENV_FILE}
# simple filter; comma separated list of lowercase TCP flags that a segment must contain to be captured
echo "PCAP_TCP_FLAGS=${PCAP_TCP_FLAGS:-ALL}" >> ${ENV_FILE}

if [[ "${PCAP_TCPDUMP}" == true || "${PCAP_JSONDUMP}" == true ]]; then
  echo "PCAP_FSN_ENABLED=true" >> ${ENV_FILE}
else
  echo "PCAP_FSN_ENABLED=false" >> ${ENV_FILE}
fi

# Create both paths to store PCAP files
mkdir -pv ${PCAP_MNT}
mkdir -pv ${PCAP_TMP}

if [[ "${PCAP_GCS_EXPORT}" == true ]]; then
  echo "{\"severity\":\"NOTICE\",\"message\":\"PCAP files will be available at: gs://${PCAP_GCS_BUCKET}/${GCS_DIR}\",\"sidecar\":\"${APP_SIDECAR}\",\"module\":\"init\"}"
fi

if [[ "${PCAP_DEBUG}" == true ]]; then
  export PCAP_SUPERVISOR_OUTPUT='/dev/stdout'
  tcpdump --version
  cat -n ${ENV_FILE}
else
  export PCAP_SUPERVISOR_OUTPUT='/dev/null'
fi

trap 'kill -TERM $PCAP_PID' TERM INT
/bin/supervisord --configuration=/pcap.conf --env-file=${ENV_FILE} &
export PCAP_PID=$!
echo "{\"severity\":\"NOTICE\",\"message\":\"PCAP sidecar started w/PID: ${PCAP_PID}\",\"sidecar\":\"${APP_SIDECAR}\",\"module\":\"init\"}"
wait ${PCAP_PID}
trap - TERM INT
wait ${PCAP_PID}
echo "{\"severity\":\"NOTICE\",\"message\":\"PCAP sidecar ( PID: ${PCAP_PID} ) exited\",\"sidecar\":\"${APP_SIDECAR}\",\"module\":\"init\"}"
